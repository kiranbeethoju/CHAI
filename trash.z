from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

API_KEY = os.getenv("OPENAI_API_KEY")
API_URL = "https://api.openai.com/v1/chat/completions"

def make_api_request(system_prompt, user_prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 2000
    }
    response = requests.post(API_URL, headers=headers, json=payload)
    return response.json()["choices"][0]["message"]["content"]

@app.route('/process', methods=['POST'])
def process():
    data = request.json
    clinical_notes = data['clinical_notes']
    results = []

    # Agent 1: DX Extraction
    system_prompt_1 = data['system_prompt_1']
    user_prompt_1 = data['user_prompt_1'].replace('[CLINICAL_NOTES]', clinical_notes)
    result_1 = make_api_request(system_prompt_1, user_prompt_1)
    results.append(result_1)

    # Agent 2: PDx-SDx-PCS Determination
    system_prompt_2 = data['system_prompt_2']
    user_prompt_2 = data['user_prompt_2'].replace('[AGENT_1_RESPONSE]', result_1)
    result_2 = make_api_request(system_prompt_2, user_prompt_2)
    results.append(result_2)

    # Agent 3: Applying Coding Clinics
    system_prompt_3 = data['system_prompt_3']
    user_prompt_3 = data['user_prompt_3'].replace('[AGENT_2_RESPONSE]', result_2)
    result_3 = make_api_request(system_prompt_3, user_prompt_3)
    results.append(result_3)

    # Agent 4: AHA and Custom Rules Rearrangement
    system_prompt_4 = data['system_prompt_4']
    user_prompt_4 = data['user_prompt_4'].replace('[AGENT_3_RESPONSE]', result_3)
    result_4 = make_api_request(system_prompt_4, user_prompt_4)
    results.append(result_4)

    return jsonify(results)

if __name__ == '__main__':
    app.run(debug=True)
