<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Medical Coding Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8 text-center">Interactive Medical Coding Interface</h1>
        
        <div class="mb-6">
            <label for="clinicalNotes" class="block mb-2 font-bold">Clinical Notes:</label>
            <textarea id="clinicalNotes" class="w-full p-2 border rounded" rows="6"></textarea>
        </div>
        
        <div class="mb-6 flex justify-center space-x-4">
            <button id="submitBtn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Submit</button>
            <button id="clearBtn" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Clear</button>
        </div>

        <div id="agentContainer" class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div id="agentInputs" class="space-y-6">
                <!-- Agent inputs will be dynamically added here -->
            </div>
            <div id="agentOutputs" class="space-y-6">
                <!-- Agent outputs will be dynamically added here -->
            </div>
        </div>
    </div>

    <div id="loader" class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
    </div>

    <div id="notification" class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg hidden"></div>

    <script>
        const agentPrompts = [
            { name: "Agent 1: DX Extraction", systemPrompt: "Extract diagnoses from the clinical notes.", userPrompt: "Extract diagnoses from the following clinical notes: [CLINICAL_NOTES]" },
            { name: "Agent 2: PDx-SDx-PCS Determination", systemPrompt: "Determine principal diagnosis, secondary diagnoses, and procedures.", userPrompt: "Determine the principal diagnosis, secondary diagnoses, and procedures based on the following extracted diagnoses: [AGENT_1_RESPONSE]" },
            { name: "Agent 3: Applying Coding Clinics", systemPrompt: "Apply coding clinics to the diagnoses and procedures.", userPrompt: "Apply relevant coding clinics to the following diagnoses and procedures: [AGENT_2_RESPONSE]" },
            { name: "Agent 4: AHA and Custom Rules Rearrangement", systemPrompt: "Apply AHA and custom rules to rearrange the codes.", userPrompt: "Apply AHA and custom rules to rearrange the following codes: [AGENT_3_RESPONSE]" }
        ];

        function createAgentInputs() {
            const agentInputsContainer = document.getElementById('agentInputs');
            agentPrompts.forEach((agent, index) => {
                const agentDiv = document.createElement('div');
                agentDiv.innerHTML = `
                    <h3 class="font-bold mb-2">${agent.name}</h3>
                    <div class="mb-2">
                        <label class="block mb-1">System Prompt:</label>
                        <textarea id="systemPrompt${index + 1}" class="w-full p-2 border rounded" rows="3">${agent.systemPrompt}</textarea>
                    </div>
                    <div>
                        <label class="block mb-1">User Prompt:</label>
                        <textarea id="userPrompt${index + 1}" class="w-full p-2 border rounded" rows="3">${agent.userPrompt}</textarea>
                    </div>
                `;
                agentInputsContainer.appendChild(agentDiv);
            });
        }

        function createAgentOutputs() {
            const agentOutputsContainer = document.getElementById('agentOutputs');
            agentPrompts.forEach((agent, index) => {
                const agentDiv = document.createElement('div');
                agentDiv.innerHTML = `
                    <h3 class="font-bold mb-2">${agent.name} Output</h3>
                    <div id="agentOutput${index + 1}" class="bg-gray-100 p-4 rounded min-h-[100px]"></div>
                `;
                agentOutputsContainer.appendChild(agentDiv);
            });
        }

        function showLoader() {
            document.getElementById('loader').classList.remove('hidden');
        }

        function hideLoader() {
            document.getElementById('loader').classList.add('hidden');
        }

        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.remove('hidden');
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }

        async function processAgents() {
            const clinicalNotes = document.getElementById('clinicalNotes').value;
            
            for (let i = 0; i < agentPrompts.length; i++) {
                showLoader();
                try {
                    const response = await axios.post('/process', {
                        clinical_notes: clinicalNotes,
                        system_prompt_1: document.getElementById(`systemPrompt${i + 1}`).value,
                        user_prompt_1: document.getElementById(`userPrompt${i + 1}`).value.replace('[CLINICAL_NOTES]', clinicalNotes).replace(`[AGENT_${i}_RESPONSE]`, document.getElementById(`agentOutput${i}`).textContent)
                    });
                    document.getElementById(`agentOutput${i + 1}`).textContent = response.data[0];
                    showNotification(`Agent ${i + 1} completed successfully`);
                } catch (error) {
                    console.error('Error processing agent:', error);
                    document.getElementById(`agentOutput${i + 1}`).textContent = 'Error processing agent';
                } finally {
                    hideLoader();
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            createAgentInputs();
            createAgentOutputs();

            document.getElementById('submitBtn').addEventListener('click', processAgents);
            document.getElementById('clearBtn').addEventListener('click', () => {
                document.getElementById('clinicalNotes').value = '';
                document.querySelectorAll('[id^="agentOutput"]').forEach(el => el.textContent = '');
            });
        });
    </script>
</body>
</html>
