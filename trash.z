<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Medical Coding Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <style>
        .agent-block {
            border-bottom: 2px solid #4a5568;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
        }
        .latest-output {
            box-shadow: 0 0 10px 2px #48bb78;
        }
        .copy-btn {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background-color: #4a5568;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
        }
        .copy-btn:hover {
            background-color: #2d3748;
        }
        .minimize-btn, .maximize-btn {
            cursor: pointer;
            margin-left: 0.5rem;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8 text-center">Interactive Medical Coding Interface</h1>
        
        <div class="mb-6">
            <label for="clinicalNotes" class="block mb-2 font-bold">Clinical Notes:</label>
            <div class="relative">
                <textarea id="clinicalNotes" class="w-full p-2 border rounded" rows="6"></textarea>
                <i class="fas fa-compress minimize-btn"></i>
                <i class="fas fa-expand maximize-btn hidden"></i>
            </div>
        </div>
        
        <div class="mb-6 flex justify-center">
            <button id="clearBtn" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Clear All</button>
        </div>

        <div id="agentContainer" class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Agent inputs and outputs will be dynamically added here -->
        </div>
    </div>

    <div id="loader" class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="text-center">
            <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500 mb-4"></div>
            <div id="loaderText" class="text-white text-xl font-bold"></div>
            <button id="cancelBtn" class="mt-4 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Cancel</button>
        </div>
    </div>

    <div id="notification" class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg hidden"></div>

    <script>
        const agentPrompts = [
            {
                name: "Agent 1: DX Extraction",
                systemPrompt: "You are an expert medical coder specializing in ICD-10-CM diagnosis extraction. Your task is to carefully analyze clinical notes and extract all relevant diagnoses, both explicitly stated and implied. Please list these diagnoses in order of significance, starting with the principal diagnosis (the condition that occasioned the admission) followed by any secondary diagnoses or comorbidities. For each diagnosis, provide the ICD-10-CM code if you are certain about it. If you're unsure about the exact code, provide the category or general area of the ICD-10-CM where the code might be found. Remember to consider any chronic conditions mentioned, as well as any complications or sequelae of the principal diagnosis. Your output should be clear, concise, and formatted for easy reading.",
                userPrompt: "Based on the following clinical notes, please extract and list all relevant diagnoses, starting with the principal diagnosis. Provide ICD-10-CM codes where you're certain, and general categories where you're not. Here are the clinical notes:\n\n[CLINICAL_NOTES]"
            },
            {
                name: "Agent 2: PDx-SDx-PCS Determination",
                systemPrompt: "You are an advanced medical coding expert with deep knowledge of ICD-10-CM and ICD-10-PCS. Your task is to analyze the extracted diagnoses and determine the Principal Diagnosis (PDx), Secondary Diagnoses (SDx), and any procedures (PCS) that should be coded. Use your expertise to identify the condition that occasioned the admission as the PDx. List all relevant secondary diagnoses, including comorbidities and complications. If any procedures are mentioned or implied, list them with their corresponding ICD-10-PCS codes if you're certain, or describe them if you're unsure of the exact code. Your response should be well-structured, clearly differentiating between PDx, SDx, and PCS codes.",
                userPrompt: "Based on the following extracted diagnoses, please determine the Principal Diagnosis (PDx), list all relevant Secondary Diagnoses (SDx), and identify any procedures (PCS) that should be coded. Provide ICD-10-CM and ICD-10-PCS codes where you're certain, and descriptions where you're not. Here are the extracted diagnoses:\n\n[AGENT_1_RESPONSE]"
            },
            {
                name: "Agent 3: Applying Coding Clinics",
                systemPrompt: "You are a highly specialized medical coding expert with comprehensive knowledge of ICD-10-CM and ICD-10-PCS guidelines, including the latest Coding Clinic advice. Your task is to review the determined Principal Diagnosis (PDx), Secondary Diagnoses (SDx), and Procedures (PCS), and apply any relevant Coding Clinic guidelines or instructions. Pay close attention to any special coding rules, sequencing guidelines, or exceptions that might apply to these specific diagnoses and procedures. If any changes to the code selection or sequencing are necessary based on Coding Clinic advice, clearly explain the reasoning behind these changes. Your response should be detailed, citing specific Coding Clinic references where applicable.",
                userPrompt: "Please review the following Principal Diagnosis (PDx), Secondary Diagnoses (SDx), and Procedures (PCS). Apply any relevant Coding Clinic guidelines, making necessary adjustments to code selection or sequencing. Explain any changes made, citing specific Coding Clinic references. Here are the codes to review:\n\n[AGENT_2_RESPONSE]"
            },
            {
                name: "Agent 4: AHA and Custom Rules Rearrangement",
                systemPrompt: "You are an elite medical coding specialist with extensive knowledge of both official ICD-10 guidelines and custom coding rules specific to certain healthcare systems or payers. Your task is to review the coded diagnoses and procedures after Coding Clinic guidelines have been applied, and make any final adjustments based on AHA coding guidelines and any custom rules that might apply. These custom rules might include specific sequencing requirements, the need to highlight certain conditions, or special considerations for particular diagnoses or procedures. Your goal is to ensure that the final code set is not only clinically accurate and compliant with official guidelines, but also optimized for the specific requirements of the healthcare system or payer. Clearly explain any changes you make and the reasoning behind them.",
                userPrompt: "Please review the following diagnoses and procedures that have been coded and adjusted based on Coding Clinic guidelines. Apply any relevant AHA guidelines and consider any custom rules that might affect the final code set. Make any necessary final adjustments, explaining your reasoning for each change. Here are the codes to review:\n\n[AGENT_3_RESPONSE]"
            }
        ];

        let currentRequest = null;

        function createAgentBlocks() {
            const agentContainer = document.getElementById('agentContainer');
            agentPrompts.forEach((agent, index) => {
                const agentBlock = document.createElement('div');
                agentBlock.className = 'agent-block col-span-2';
                agentBlock.innerHTML = `
                    <h3 class="font-bold mb-2">${agent.name}</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <div class="mb-2">
                                <label class="block mb-1">System Prompt:</label>
                                <div class="relative">
                                    <textarea id="systemPrompt${index + 1}" class="w-full p-2 border rounded" rows="6">${agent.systemPrompt}</textarea>
                                    <i class="fas fa-compress minimize-btn"></i>
                                    <i class="fas fa-expand maximize-btn hidden"></i>
                                </div>
                            </div>
                            <div class="mb-2">
                                <label class="block mb-1">User Prompt:</label>
                                <div class="relative">
                                    <textarea id="userPrompt${index + 1}" class="w-full p-2 border rounded" rows="4">${agent.userPrompt}</textarea>
                                    <i class="fas fa-compress minimize-btn"></i>
                                    <i class="fas fa-expand maximize-btn hidden"></i>
                                </div>
                            </div>
                            <button id="submitBtn${index + 1}" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Submit Agent ${index + 1}</button>
                            <div id="agentLog${index + 1}" class="mt-2 text-sm text-gray-600"></div>
                        </div>
                        <div>
                            <label class="block mb-1">Output:</label>
                            <div class="relative">
                                <textarea id="agentOutput${index + 1}" class="w-full p-2 border rounded" rows="12"></textarea>
                                <button class="copy-btn">Copy</button>
                                <i class="fas fa-compress minimize-btn"></i>
                                <i class="fas fa-expand maximize-btn hidden"></i>
                            </div>
                        </div>
                    </div>
                `;
                agentContainer.appendChild(agentBlock);
            });
        }

        function showLoader(agentIndex) {
            document.getElementById('loader').classList.remove('hidden');
            document.getElementById('loaderText').textContent = `Processing Agent ${agentIndex + 1}...`;
        }

        function hideLoader() {
            document.getElementById('loader').classList.add('hidden');
        }

        function showNotification(message, isError = false) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.remove('hidden', 'bg-green-500', 'bg-red-500');
            notification.classList.add(isError ? 'bg-red-500' : 'bg-green-500');
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }

        async function processAgent(agentIndex) {
            const clinicalNotes = document.getElementById('clinicalNotes').value;
            const logElement = document.getElementById(`agentLog${agentIndex + 1}`);
            showLoader(agentIndex);
            logElement.textContent = "Processing...";
            try {
                let previousResponse = '';
                if (agentIndex > 0) {
                    previousResponse = document.getElementById(`agentOutput${agentIndex}`).value;
                }

                let userPrompt = document.getElementById(`userPrompt${agentIndex + 1}`).value;
                userPrompt = userPrompt.replace('[CLINICAL_NOTES]', clinicalNotes);
                if (agentIndex > 0) {
                    userPrompt = userPrompt.replace(`[AGENT_${agentIndex}_RESPONSE]`, previousResponse);
                }

                currentRequest = axios.post('/process', {
                    clinical_notes: clinicalNotes,
                    agent_index: agentIndex + 1,
                    [`system_prompt_${agentIndex + 1}`]: document.getElementById(`systemPrompt${agentIndex + 1}`).value,
                    [`user_prompt_${agentIndex + 1}`]: userPrompt,
                    previous_response: previousResponse
                });
                
                const response = await currentRequest;
                if (response.data.success) {
                    const outputElement = document.getElementById(`agentOutput${agentIndex + 1}`);
                    outputElement.value = response.data.data;
                    outputElement.classList.add('latest-output');
                    logElement.textContent = `Agent ${agentIndex + 1} completed successfully. Check server logs for details.`;
                    showNotification(`Agent ${agentIndex + 1} completed successfully`);

                    // Update the next agent's input if applicable
                    if (agentIndex < agentPrompts.length - 1) {
                        const nextUserPrompt = document.getElementById(`userPrompt${agentIndex + 2}`);
                        nextUserPrompt.value = nextUserPrompt.value.replace(`[AGENT_${agentIndex + 1}_RESPONSE]`, response.data.data);
                    }

                    // Remove 'latest-output' class from previous outputs
                    document.querySelectorAll('.latest-output').forEach(el => {
                        if (el !== outputElement) {
                            el.classList.remove('latest-output');
                        }
                    });
                } else {
                    throw new Error(response.data.error || 'Unknown error occurred');
                }
            } catch (error) {
                console.error('Error processing agent:', error);
                document.getElementById(`agentOutput${agentIndex + 1}`).value = 'Error processing agent';
                logElement.textContent = `Error processing Agent ${agentIndex + 1}. Check console for details.`;
                showNotification(`Error: ${error.message}`, true);
            } finally {
                hideLoader();
                currentRequest = null;
            }
        }

        function setupEventListeners() {
            agentPrompts.forEach((_, index) => {
                document.getElementById(`submitBtn${index + 1}`).addEventListener('click', () => processAgent(index));
            });

            document.getElementById('clearBtn').addEventListener('click', () => {
                document.getElementById('clinicalNotes').value = '';
                document.querySelectorAll('[id^="agentOutput"]').forEach(el => {
                    el.value = '';
                    el.classList.remove('latest-output');
                });
                document.querySelectorAll('[id^="agentLog"]').forEach(el => el.textContent = '');
            });

            document.getElementById('cancelBtn').addEventListener('click', () => {
                if (currentRequest) {
                    currentRequest.cancel('Operation canceled by the user');
                    hideLoader();
                    showNotification('Operation canceled', true);
                }
            });

            // Setup copy buttons
            document.querySelectorAll('.copy-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const textArea = this.parentElement.querySelector('textarea');
                    textArea.select();
                    document.execCommand('copy');
                    showNotification('Copied to clipboard!');
                });
            });

            // Setup minimize/maximize buttons
            document.querySelectorAll('.minimize-btn, .maximize-btn').forEach(btn => {
