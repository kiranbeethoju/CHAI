from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import requests
import os
from dotenv import load_dotenv
import logging

load_dotenv()

app = Flask(__name__, static_folder='static')
CORS(app)

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_KEY = os.getenv("OPENAI_API_KEY")
API_URL = "https://api.openai.com/v1/chat/completions"

def make_api_request(system_prompt, user_prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 2000
    }
    response = requests.post(API_URL, headers=headers, json=payload)
    response.raise_for_status()  # This will raise an exception for HTTP errors
    return response.json()["choices"][0]["message"]["content"]

@app.route('/')
def index():
    return send_from_directory(app.static_folder, 'index.html')

@app.route('/process', methods=['POST'])
def process():
    try:
        data = request.json
        clinical_notes = data['clinical_notes']
        agent_index = data['agent_index']
        system_prompt = data[f'system_prompt_{agent_index}']
        user_prompt = data[f'user_prompt_{agent_index}']

        logger.info(f"Processing Agent {agent_index}")
        logger.info(f"System Prompt: {system_prompt[:100]}...")
        logger.info(f"User Prompt: {user_prompt[:100]}...")

        if agent_index == '1':
            user_prompt = user_prompt.replace('[CLINICAL_NOTES]', clinical_notes)
        else:
            previous_response = data.get('previous_response', '')
            user_prompt = user_prompt.replace(f'[AGENT_{int(agent_index)-1}_RESPONSE]', previous_response)

        result = make_api_request(system_prompt, user_prompt)
        
        logger.info(f"Agent {agent_index} Response: {result[:100]}...")
        
        return jsonify({"success": True, "data": result})
    except requests.exceptions.RequestException as e:
        logger.error(f"API request error: {str(e)}")
        return jsonify({"success": False, "error": f"API request failed: {str(e)}"}), 500
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return jsonify({"success": False, "error": f"An unexpected error occurred: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=8001)
